STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 1  Assembler
                                               d:\stm8\dbg1\main.asm

   1                         stm8/     
   2                         
   0  000000                                 #include "mapping.inc"
   1                                                          ;-------------------------------
                                                                ;-----------------------
   2                                                          ; SEGMENT MAPPING FILE 
                                                                ;AUTOMATICALLY GENERATED BY 
                                                                ;STVD
   3                                                          ; SHOULD NOT BE MANUALLY 
                                                                ;MODIFIED.
   4                                                          ; CHANGES WILL BE LOST WHEN FILE
                                                                ; IS REGENERATED.
   5                                                          ;-------------------------------
                                                                ;-----------------------
   6  000000                                 #define  RAM0 1
   7  000000                                 #define  ram0_segment_start 0
   8  000000                                 #define  ram0_segment_end FF
   9  000000                                 #define  RAM1 1
  10  000000                                 #define  ram1_segment_start 100
  11  000000                                 #define  ram1_segment_end 1FF
  12  000000                                 #define  stack_segment_start 200
  13  000000                                 #define  stack_segment_end 3FF
<END_OF_INCLUSION>
   0  000000                                 #include "stm8s003f3.inc"
   1                         ;----STM8S003F3 peripherial define file
   2                         ;--Registers of the MCU:
   3                                   
   4                                                          ;---CLK-----
   5  000000                                 #define  CLK_ICKR      $50C0;
   6  000000                                 #define  CLK_ECKR      $50C1;
   7  000000                                 #define  CLK_CMSR      $50C3;
   8  000000                                 #define  CLK_SWR       $50C4;
   9  000000                                 #define  CLK_SWCR      $50C5;
  10  000000                                 #define  CLK_CKDIVR    $50C6;
  11  000000                                 #define  CLK_PCKENR1    $50C7;
  12  000000                                 #define  CLK_CSSR       $50C8;
  13  000000                                 #define  CLK_CCOR       $50C9;
  14  000000                                 #define  CLK_PCKENR2    $50CA;
  15                                   
  16  000000                                 #define  HSERDY        #$02
  17  000000                                 #define  HSEEN         #$01
  18                                   
  19  000000                                 #define  SWIF    #$08 
  20  000000                                 #define  SWIEN         #$04
  21  000000                                 #define  SWEN          #$02
  22  000000                                 #define  SWBSY   #$01
  23                                   
  24  000000                                 #define  HSIDIV_1 #$00
  25  000000                                 #define  HSIDIV_2 #$08
  26  000000                                 #define  HSIDIV_4 #$10
  27  000000                                 #define  HSIDIV_8 #$18
  28                                   
  29  000000                                 #define  CPUDIV_1 #$00
  30  000000                                 #define  CPUDIV_2 #$01
  31  000000                                 #define  CPUDIV_4 #$02
  32  000000                                 #define  CPUDIV_8 #$03
  33  000000                                 #define  CPUDIV_16 #$04
  34  000000                                 #define  CPUDIV_32 #$05
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 2  Assembler
                                               d:\stm8\dbg1\main.asm

  35  000000                                 #define  CPUDIV_64 #$06
  36  000000                                 #define  CPUDIV_128 #$07
  37                                                          ;-------ITC------
  38  000000                                 #define  EXTI_CR1  $50A0  ;
  39  000000                                 #define  EXTI_CR2  $50A1  ;
  40                                                          ;----FLASH-------
  41  000000                                 #define  FLASH_CR1 $505A  ;
  42  000000                                 #define  FLASH_CR2 $505B  ;
  43  000000                                 #define  LASH_NCR2 $505C  ;
  44  000000                                 #define  FLASH_FPR $505D  ;
  45  000000                                 #define  FLASH _NFPR $505E  ; 	
  46  000000                                 #define  _NFPR $505E _IAPSR $505F  ;
  47                                                          ;--------PORT A-----
  48  000000                                 #define  PA_ODR        $5000;
  49  000000                                 #define  PA_IDR        $5001;
  50  000000                                 #define  PA_DDR        $5002;
  51  000000                                 #define  PA_CR1        $5003;
  52  000000                                 #define  PA_CR2  $5004  ;
  53                                                          ;--------PORT B------
  54  000000                                 #define  PB_ODR        $5005;
  55  000000                                 #define  PB_IDR        $5006;
  56  000000                                 #define  PB_DDR        $5007;
  57  000000                                 #define  PB_CR1        $5008;
  58  000000                                 #define  PB_CR2        $5009;
  59                                                          ;---------PORT  C-----
  60  000000                                 #define  PC_ODR        $500A;
  61  000000                                 #define  PC_IDR        $500B;
  62  000000                                 #define  PC_DDR        $500C;
  63  000000                                 #define  PC_CR1        $500D;
  64  000000                                 #define  PC_CR2        $500E;
  65                                   
  66                                                          ;----PORT D-------
  67  000000                                 #define  PD_ODR        $500F;
  68  000000                                 #define  PD_IDR        $5010;
  69  000000                                 #define  PD_DDR        $5011;
  70  000000                                 #define  PD_CR1        $5012;
  71  000000                                 #define  PD_CR2        $5013;
  72                                                          ;--------PORT E-------
  73  000000                                 #define  PE_ODR        $5014;
  74  000000                                 #define  PE_IDR        $5015;
  75  000000                                 #define  PE_DDR        $5016;
  76  000000                                 #define  PE_CR1        $5017;
  77  000000                                 #define  PE_CR2        $5018;
  78                                                          ;---------PORT F------
  79  000000                                 #define  PF_ODR        $5019;
  80  000000                                 #define  PF_IDR        $501A;
  81  000000                                 #define  PF_DDR        $501B;
  82  000000                                 #define  PF_CR1        $501C;
  83  000000                                 #define  PF_CR2        $501D;
  84                                                          ;------ITC---------
  85  000000                                 #define  $50A0 $50A0   ;
  86  000000                                 #define  $50A1 $50A1   ;
  87                                                          ;--------TIM 1----------
  88  000000                                 #define  TIM1_CR1  $5250  ;
  89  000000                                 #define  TIM1_CR2  $5251  ;
  90  000000                                 #define  TIM1_SMCR $5252  ;
  91  000000                                 #define  TIM1_ETR  $5253  ;
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 3  Assembler
                                               d:\stm8\dbg1\main.asm

  92  000000                                 #define  TIM1_IER  $5254  ;
  93  000000                                 #define  TIM1_SR1  $5255  ;
  94  000000                                 #define  TIM1_SR2  $5256  ;
  95  000000                                 #define  TIM1_EGR  $5257  ;
  96  000000                                 #define  TIM1_CCMR1 $5258  ;
  97  000000                                 #define  TIM1_CCMR2 $5259  ;
  98  000000                                 #define  TIM1_CCMR3 $525A  ;
  99  000000                                 #define  TIM1_CCMR4  $525B  ;
 100  000000                                 #define  TIM1_CCER1 $525C  ;
 101  000000                                 #define  TIM1_CCER2 $525D  ;
 102  000000                                 #define  TIM1_CNTRH $525E  ;
 103  000000                                 #define  TIM1_CNTRL  $255f  ;
 104  000000                                 #define  TIM1_PSCRH  $5260  ;
 105  000000                                 #define  TIM1_PSCRL $5261  ;
 106  000000                                 #define  TIM1_ARRH  $5262  ;
 107  000000                                 #define  TIM1_ARRL  $5263  ;
 108  000000                                 #define  TIM1_RCR   $5264  ;
 109  000000                                 #define  TIM1_CCR1H $5265  ;
 110  000000                                 #define  TIM1_CCR1L $5266  ;
 111  000000                                 #define  TIM1_CCR2H $5267  ;
 112  000000                                 #define  TIM1_CCR2L $5268  ;
 113  000000                                 #define  TIM1_CCR3H $5269  ;
 114  000000                                 #define  TIM1_CCR3L $526A  ;
 115  000000                                 #define  TIM1_CCR4H  $526B  ;
 116  000000                                 #define  TIM1_CCR4L $526C  ;
 117  000000                                 #define  TIM1_BKR   $526D  ;
 118  000000                                 #define  TIM1_DTR   $526E  ;
 119  000000                                 #define  TIM1_OISR  $526F  ;
 120                                   
 121  000000                                 #define  TIM_CR1_CENTER_ALINGN_1 #$20
 122  000000                                 #define  TIM_CR1_CENTER_ALINGN_2 #$40
 123  000000                                 #define  TIM_CR1_CENTER_ALINGN_3 #$60
 124  000000                                 #define  TIM_CR1_COUNTS_UP #$00
 125  000000                                 #define  TIM_CR1_COUNTS_DOWN #$10
 126  000000                                 #define  TIM_CR1_PRELOAD #$80
 127  000000                                 #define  TIM_CCMR_ACTIVE_ON_MATCH #$10
 128  000000                                 #define  TIM_CCMR_INACTIVE_ON_MATCH #$20
 129  000000                                 #define  TIM_CCMR_TOGGLE   #$30
 130  000000                                 #define  TIM_CCMR_FORCE_INACTIVE #$40 
 131  000000                                 #define  TIM_CCMR_FORCE_ACTIVE   #$50
 132                                                          ;-------------SPI----------
 133  000000                                 #define  SPI_CR1  $5200  ;
 134  000000                                 #define  SPI_CR2 $5201  ;
 135  000000                                 #define  SPI_ICR  $5202  ;
 136  000000                                 #define  SPI_SR        $5203;
 137  000000                                 #define  SPI_DR        $5204;
 138  000000                                 #define  SPI_CRCPR     $5205;
 139  000000                                 #define  SPI_RXCRCR    $5206;
 140  000000                                 #define  SPI_TXCRCR    $5207;
 141                                                          ;---------------I2C----------
 142  000000                                 #define  I2C_CR1       $5210;
 143  000000                                 #define  I2C_CR2       $5211;
 144  000000                                 #define  I2C_FREQR     $5212;
 145  000000                                 #define  I2C_OARL      $5213;
 146  000000                                 #define  I2C_OARH      $5214;
 147  000000                                 #define  I2C_DR        $5216;
 148  000000                                 #define  I2C_SR1       $5217;
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 4  Assembler
                                               d:\stm8\dbg1\main.asm

 149  000000                                 #define  I2C_SR2       $5218;
 150  000000                                 #define  I2C_SR3       $5219;
 151  000000                                 #define  I2C_ITR       $521A;
 152  000000                                 #define  I2C_CCRL      $521B;
 153  000000                                 #define  I2C_CCRH      $521C;
 154  000000                                 #define  I2C_TRISER    $521D;
 155  000000                                 #define  I2C_PECR      $521E;
 156                                                          ;------------UART--------------
 157  000000                                 #define  UART1_SR      $5230;
 158  000000                                 #define  UART1_DR      $5231;
 159  000000                                 #define  UART1_BRR1    $5232;
 160  000000                                 #define  UART1_BRR2    $5233;
 161  000000                                 #define  UART1_CR1     $5234;
 162  000000                                 #define  UART1_CR2     $5235;
 163  000000                                 #define  UART1_CR3     $5236;
 164  000000                                 #define  UART1_CR4     $5237;
 165  000000                                 #define  UART1_CR5     $5238;
 166  000000                                 #define  UART1_GTR     $5239;
 167  000000                                 #define  UART1_PSCR    $523A;
 168                                                          ;----------TIM4----------------
 169  000000                                 #define  TIM4_CR1      $5340;
 170  000000                                 #define  TIM4_IER      $5343;
 171  000000                                 #define  TIM4_SR       $5344;
 172  000000                                 #define  TIM4_EGR      $5345;
 173  000000                                 #define  TIM4_CNTR     $5346;
 174  000000                                 #define  TIM4_PSCR     $5347;
 175  000000                                 #define  TIM4_ARR      $5348;
 176                                                          ;---------ADC1-----------------
 177                                   
 178  000000                                 #define  ADC_CSR       $5400;
 179  000000                                 #define  ADC_CR1       $5401;
 180  000000                                 #define  ADC_CR2       $5402;
 181  000000                                 #define  ADC_CR3       $5403;
 182  000000                                 #define  ADC_DRH       $5404;
 183  000000                                 #define  ADC_DRL       $5405;
 184  000000                                 #define  ADC_TDRH      $5406;
 185  000000                                 #define  ADC_TDRL      $5407;
 186  000000                                 #define  ADC_HTRH      $5408;
 187  000000                                 #define  ADC_HTRL      $5409;
 188  000000                                 #define  ADC_LTRH      $540A;
 189  000000                                 #define  ADC_LTRL      $540B;
 190  000000                                 #define  ADC_AWSRH     $540C;
 191  000000                                 #define  ADC_AWSRL     $540D;
 192  000000                                 #define  ADC_AWCRH     $540E;
 193  000000                                 #define  ADC_AWCRL     $540F;
 194                                                          ;;buffers
 195  000000                                 #define  ADC_DB0RH     $53E0;
 196  000000                                 #define  ADC_DB0RL     $53E1;
 197  000000                                 #define  ADC_DB1RH     $53E2;
 198  000000                                 #define  ADC_DB1RL     $53E3;
 199  000000                                 #define  ADC_DB2RH     $53E4;
 200  000000                                 #define  ADC_DB2RL     $53E5;
 201  000000                                 #define  ADC_DB3RH     $53E6;
 202  000000                                 #define  ADC_DB3RL     $53E7;
 203  000000                                 #define  ADC_DB4RH     $53E8;
 204  000000                                 #define  ADC_DB4RL     $53E9;
 205  000000                                 #define  ADC_DB5RH     $53EA;
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 5  Assembler
                                               d:\stm8\dbg1\main.asm

 206  000000                                 #define  ADC_DB5RL     $53EB;
 207  000000                                 #define  ADC_DB6RH     $53EC;
 208  000000                                 #define  ADC_DB6RL     $53ED;
 209  000000                                 #define  ADC_DB7RH     $53EC;
 210  000000                                 #define  ADC_DB7RL     $53ED;
 211  000000                                 #define  ADC_DB8RH     $53EC;
 212  000000                                 #define  ADC_DB8RL     $53ED;
 213                                   
 214                                   
 215                                                          ;----------TIM2----------
 216  000000                                 #define  TIM2_CR1      $5300;
 217  000000                                 #define  TIM2_IER      $5303;
 218  000000                                 #define  TIM2_SR1      $5304;
 219  000000                                 #define  TIM2_SR2      $5305;
 220  000000                                 #define  TIM2_EGR      $5306;
 221  000000                                 #define  TIM2_CCMR1    $5307;
 222  000000                                 #define  TIM2_CCMR2    $5308;
 223  000000                                 #define  TIM2_CCMR3    $5309;
 224  000000                                 #define  TIM2_CCER1    $530A;
 225  000000                                 #define  TIM2_CCER2    $530B;
 226  000000                                 #define  TIM2_CNTRH    $530C;
 227  000000                                 #define  TIM2_CNTRL  $530D  ;
 228  000000                                 #define  TIM2_PSCR     $530E;
 229  000000                                 #define  TIM2_ARRH     $530F;
 230  000000                                 #define  TIM2_ARRL     $5310;
 231  000000                                 #define  TIM2_CCR1H    $5311;
 232  000000                                 #define  TIM2_CCR1L    $5312;
 233  000000                                 #define  TIM2_CCR2H      $5313  ;
 234  000000                                 #define  TIM2_CCR2L    $5314;
 235  000000                                 #define  TIM2_CCR3H    $5315;
 236  000000                                 #define  TIM2_CCR3L    $5316;
 237                                   
 238                                   
<END_OF_INCLUSION>
   5                                   
   6                                   segment  at 0000 'USER_RAM'
   7                                                          ;--USER VARIABLES--
   8                                                          ;pointer for receiver	$0000
   9  000000                       _RxPtr_   equ      $0000
  10                                                          ;pointer for transmitter $0002
  11  000002                       _TxPtr_   equ      $0002
  12                                                          ; bit0-sybol has been received
  13                                                          ; bit1 - it is a sybol for 
                                                                ;transmission
  14  000004                       _semaphore  equ      $0004
  15                                                          ;bufers for transmission and 
                                                                ;reception
  16  000010                       _RxBuffer32  equ      $0010
  17  000000                                 #define  _RxBuffer32_end $002f   ;last element
  18  000030                       _TxBuffer32  equ      $0030
  19  000000                                 #define  _TxBuffer32_end $004f   ; last element
  20  000050                       _received_char  equ      $0050
  21                                                          ;stringbuffer $0004
  22  000051                       str1      equ      $0051         
  23                                                          ;-----------------
  24                                   segment  'rom'     
  25  000000   5F505554494E2048    
  25  000008   554A4C4F0A0D        _hello    STRING   "_PUTIN HUJLO",'\n','\r'
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 6  Assembler
                                               d:\stm8\dbg1\main.asm

  26                         
  27                         main.l    
  28                                                          ; initialize SP
  29  00000E   AE03FF                        ldw      X,#stack_end
  30  000011   94                            ldw      SP,X
  31                         
  32  000012                                 #ifdef   1             
  33                                                          ; clear RAM0
  34  000000                       ram0_start.b  EQU      $0
  35  0000FF                       ram0_end.b  EQU      $FF
  36  000012   AE0000                        ldw      X,#ram0_start
  37                         clear_ram0.l  
  38  000015   7F                            clr      (X)
  39  000016   5C                            incw     X
  40  000017   A300FF                        cpw      X,#ram0_end   
  41  00001A R 23F9                          jrule    clear_ram0
  42  00001C                                 #endif   
  43                         
  44  00001C                                 #ifdef   1
  45                                                          ; clear RAM1
  46  000100                       ram1_start.w  EQU      $100
  47  0001FF                       ram1_end.w  EQU      $1FF          
  48  00001C   AE0100                        ldw      X,#ram1_start
  49                         clear_ram1.l  
  50  00001F   7F                            clr      (X)
  51  000020   5C                            incw     X
  52  000021   A301FF                        cpw      X,#ram1_end   
  53  000024 R 23F9                          jrule    clear_ram1
  54  000026                                 #endif   
  55                         
  56                                                          ; clear stack
  57  000200                       stack_start.w  EQU      $200
  58  0003FF                       stack_end.w  EQU      $3FF
  59  000026   AE0200                        ldw      X,#stack_start
  60                         clear_stack.l  
  61  000029   7F                            clr      (X)
  62  00002A   5C                            incw     X
  63  00002B   A303FF                        cpw      X,#stack_end  
  64  00002E R 23F9                          jrule    clear_stack
  65                         ;______________________________________
  66                         ;  _   _ ___  ___ _ __   _ __ ___   __ _(_)_ __  
  67                         ; | | | / __|/ _ \ '__| | '_ ` _ \ / _` | | '_ \ 
  68                         ; | |_| \__ \  __/ |    | | | | | | (_| | | | | |
  69                         ;  \__,_|___/\___|_|    |_| |_| |_|\__,_|_|_| |_|
  70                         
  71  000030   AE0030                        LDW      X, #_TxBuffer32  ;
  72                         ;--global pointer UART Rx bufffer init
  73                         ;[*P=$0000][$0002...$0012]
  74  000033   B651                          LD       A, str1       ;
  75  000035   AE0002                        LDW      X, #$0002
  76  000038   BF00                          LDW      $0000, X
  77  00003A   A600                          LD       A, #$00
  78  00003C   88                            PUSH     A
  79  00003D R CD0000                        CALL     clkSetHsiDivider
  80  000040   84                            POP      A
  81  000041   A6FF                          LD       A, #$FF
  82  000043   C750C7                        LD       $50C7, A
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 7  Assembler
                                               d:\stm8\dbg1\main.asm

  83  000046   A68A                          LD       A, #$8A
  84  000048   C750CA                        LD       $50CA, A
  85                                                          ;--turn on quartz
  86  00004B R CD0000                        CALL     clkSwitchToCrystal
  87                                   
  88                                                          ;--PC3,4-output 
  89  00004E   A638                          LD       A, #$38       ; 3,4,5 
  90  000050   C7500C                        LD       $500C, A
  91  000053   C7500D                        LD       $500D, A
  92  000056   C7500E                        LD       $500E, A
  93                                                          ;--PA3
  94  000059   A600                          LD       A, #$00       ;  
  95  00005B   C75002                        LD       $5002, A
  96  00005E   C75003                        LD       $5003, A
  97  000061   C75004                        LD       $5004, A
  98                                                          ;--D
  99  000064   A620                          LD       A, #$20       ;  
 100  000066   C75011                        LD       $5011, A      ;   PD5 output,
 101  000069   721A500F                      BSET     $500F, #$05   ; high level PD5 
 102  00006D   C75012                        LD       $5012, A      ; push-pull,
 103  000070   C75012                        LD       $5012, A      ; up to 10MHz.
 104                                                          ;dumy delay
 105  000073   9D                            NOP      
 106  000074   9D                            NOP      
 107  000075   9D                            NOP      
 108                                   
 109                                   
 110                                                          ;@baudRate16, divider
 111  000076   AE0209                        LDW      X, #$0209
 112  000079   89                            PUSHW    X
 113                         ;@dataLength8, ;
 114                                                          ;$10->9bits (1stop 1 start) 
 115                                                          ;, $00->8bits (set  ;manually 
                                                                ;below)
 116  00007A   A600                          LD       A, #$00
 117  00007C   88                            PUSH     A
 118                         ;@stopBits8  $00->1bit, $20->2bits
 119  00007D   A600                          LD       A, #$00
 120  00007F   88                            PUSH     A
 121  000080   A600                          LD       A, #$00       ;@parity8, $00-disable, 
 122                                                          ;$04-enable: ($02-odd OR 
                                                                ;$00-even)
 123  000082   88                            PUSH     A
 124  000083 R CD0000                        CALL     uart1DuplexSetupIT
 125                         ;-----------
 126                         ;SP +5
 127  000086   5B05                          ADDW     SP, #$05
 128  000088   A631                          LD       A,#$31
 129  00008A   9D                            nop      
 130  00008B   9D                            nop      
 131  00008C   9D                            nop      
 132  00008D   9D                            nop      
 133                         
 134                                   
 135                                   
 136                                                          ;--L     o o    Pppp
 137                                                          ;  L    o   o   P   p
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 8  Assembler
                                               d:\stm8\dbg1\main.asm

 138                                                          ;  L    o   o   Ppp 
 139                                                          ;  L L   o o    P
 140                                                          ;;init pointers
 141  00008E   AE0010                        LDW      X, #_RxBuffer32
 142  000091   BF00                          LDW      _RxPtr_, X
 143  000093   AE0030                        LDW      X, #_TxBuffer32
 144  000096   BF02                          LDW      _TxPtr_, X
 145                         infinite_loop.l  
 146                                                          ;are there  symbol?
 147  000098 R 720100041C                    BTJF     _semaphore, #$0, _no_sym_reeived
 148                                                          ;when symbol received:
 149  00009D   72110004                      BRES     _semaphore, #$0   ;clear semaphore
 150  0000A1   BE00                          LDW      X, _RxPtr_    ; load a pointer
 151  0000A3   B650                          LD       A, _received_char   ;read symbol from Rx
 152  0000A5   F7                            LD       (X), A        ; store symbol in an arrray
 153                                                          ;when the symbol last - assign 
                                                                ;to pointer first cell
 154  0000A6   9093                          LDW      Y, X
 155  0000A8   72A2002F                      SUBW     Y, #$002f 
 156  0000AC R 2706                          JREQ     _last_rx_item
 157                                                          ;when character (byte) not last 
                                                                ;- increment & store pointer
 158  0000AE   5C                            INCW     X
 159  0000AF   BF00                          LDW      _RxPtr_, X
 160  0000B1 R CC0000                        JP       _no_sym_reeived    
 161                         _last_rx_item  
 162                                                          ;when the symbol is  last - 
                                                                ;clear pointer
 163  0000B4   AE0010                        LDW      X, #_RxBuffer32
 164  0000B7   BF00                          LDW      _RxPtr_, X
 165                                                          ;LD UART1_DR, A
 166                         _no_sym_reeived  
 167                         
 168  0000B9   8F                            WFI      
 169  0000BA R 20DC                          jra      infinite_loop
 170                                   
 171                         
 172                                   
 173                         
 174                         ;------------------------------	
 175                         ;  _            _   
 176                         ; | |_ ___  ___| |_ 
 177                         ; | __/ _ \/ __| __|
 178                         ; | ||  __/\__ \ |_ 
 179                         ;  \__\___||___/\__|
 180                         ;-------------------------------
 181                         
 182                         ;==PROCEDURE==uart1ReceiverSetup
 183                         ;@baudRate16, divider
 184                         ;@dataLength8, $10->9bits (1stop 1 start) , $00->8bits
 185                                                          ;(set  manually below)
 186                         ;@stopBits8, active only when 8 bits: $00->1bit, $20->2bits
 187                         ;@parity8, $00-disable, $04-enable: ($02-odd OR $00-even)
 188                         ;-----------
 189                         ;SP +5
 190                         ;  0  1 2 4    5         6      7      8 
 191                         ;[v8a|A|RET|stopBits|dataLength|baudRate]
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 9  Assembler
                                               d:\stm8\dbg1\main.asm

 192                         
 193                         uart1ReceiverSetup  
 194                                                          ;--store A
 195  0000BC   88                            PUSH     A
 196                                                          ;--allocate 1 byte
 197  0000BD   5201                          SUBW     SP, #$01
 198  0000BF                                 #define  _U1000_v8a $00 
 199  0000BF                                 #define  _U1000_parity $05
 200  0000BF                                 #define  _U1000_stopBits $06 
 201  0000BF                                 #define  _U1000_dataLength $07
 202  0000BF                                 #define  _U1000_baudRateH $08
 203  0000BF                                 #define  _U1000_baudRateL $09
 204                                                          ;--disable Rx, Tx
 205  0000BF   72155235                      BRES     $5235, #$2    ; REN flag
 206  0000C3   72175235                      BRES     $5235, #$3    ; TEN flag
 207                                                          ;--when the length 9 bits-jump 
                                                                ;below
 208  0000C7   A610                          LD       A, #$10
 209  0000C9   1407                          AND      A, ($07,SP)
 210  0000CB R 2605                          JRNE     L_U1000_nsb   ;when 9 bits-go to label
 211                                                          ;--when 8 bit set stop bits
 212  0000CD   7B06                          LD       A, ($06,SP)
 213  0000CF   C75236                        LD       $5236, A
 214                         L_U1000_nsb  
 215                                                          ;--write data length and parity
 216  0000D2   7B07                          LD       A,($07,SP)
 217  0000D4   1A05                          OR       A, ($05,SP)
 218  0000D6   C75234                        LD       $5234, A
 219                                                          ;prepare UART1_BRR2
 220                                                          ;n4 n1
 221  0000D9   7B09                          LD       A, ($09,SP)
 222  0000DB   A40F                          AND      A, #$0F       ;
 223  0000DD   6B00                          LD       ( $00,SP),A   ; store nibble 1
 224  0000DF   7B08                          LD       A, ($08,SP)
 225  0000E1   A4F0                          AND      A, #$f0       ; nibble 4
 226  0000E3   1A00                          OR       A, ($00,SP)   ; n4+n1
 227  0000E5   6B00                          LD       ( $00,SP),A   ; store BRR2 [n4,n1]
 228                                                          ;;--send -TO REGISTER BRR2
 229  0000E7   C75233                        LD       $5233 , A
 230                                                          ;----n3 n2
 231  0000EA   7B08                          LD       A, ($08,SP)
 232  0000EC   4E                            SWAP     A
 233  0000ED   A4F0                          AND      A, #$F0
 234  0000EF   6B00                          LD       ( $00,SP),A   ; store n3
 235  0000F1   7B09                          LD       A, ($09,SP)
 236  0000F3   4E                            SWAP     A
 237  0000F4   A40F                          AND      A, #$0f
 238  0000F6   1A00                          OR       A, ( $00,SP)
 239                                                          ;--send to register BRR1
 240  0000F8   C75232                        LD       $5232, A
 241                                                          ; RIEN interrupt on receive
 242  0000FB   721A5235                      BSET     $5235, #$5 
 243                                                          ;--setting REN bit "Receiver 
                                                                ;enable"
 244  0000FF   72145235                      BSET     $5235 , #$2
 245                                                          ;--restore stack
 246  000103   5B01                          ADDW     SP, #$01
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 10  Assembler
                                               d:\stm8\dbg1\main.asm

 247  000105   84                            POP      A
 248  000106   81                            RET      
 249                                                          ;==PROCEDURE==uart1TransmitterSe
                                                                ;tup
 250                                   
 251                         ;@baudRate16, divider
 252                         ;@dataLength8, $10->9bits (1stop 1 start) , $00->8bits
 253                                                          ;(set  manually below)
 254                         ;@stopBits8, active only when 8 bits: $00->1bit, $20->2bits
 255                         ;@parity8, $00-disable, $04-enable: ($02-odd OR $00-even)
 256                         ;-----------
 257                         ;SP +5
 258                         ;  0  1 2 4    5         6      7      8 
 259                         ;[v8a|A|RET|stopBits|dataLength|baudRate]
 260                         
 261                         uart1TransmitterSetup  
 262                                                          ;--store A
 263  000107   88                            PUSH     A
 264                                                          ;--allocate 1 byte
 265  000108   5201                          SUBW     SP, #$01
 266  00010A                                 #define  _U1001_v8a $00 
 267  00010A                                 #define  _U1001_parity $05
 268  00010A                                 #define  _U1001_stopBits $06 
 269  00010A                                 #define  _U1001_dataLength $07
 270  00010A                                 #define  _U1001_baudRateH $08
 271  00010A                                 #define  _U1001_baudRateL $09
 272                                                          ;--disable Rx, Tx
 273  00010A   72155235                      BRES     $5235, #$2    ; REN flag
 274  00010E   72175235                      BRES     $5235, #$3    ; TEN flag
 275                                                          ;--when the length 9 bits-jump 
                                                                ;below
 276  000112   A610                          LD       A, #$10
 277  000114   1407                          AND      A, ($07,SP)
 278  000116 R 2605                          JRNE     L_U1001_nsb   ;when 9 bits-go to label
 279                                                          ;--when 8 bit set stop bits
 280  000118   7B06                          LD       A, ($06,SP)
 281  00011A   C75236                        LD       $5236, A
 282                         L_U1001_nsb  
 283                                                          ;--write data length and parity
 284  00011D   7B07                          LD       A,($07,SP)
 285  00011F   1A05                          OR       A, ($05,SP)
 286  000121   C75234                        LD       $5234, A
 287                                                          ;prepare UART1_BRR2
 288                                                          ;n4 n1
 289  000124   7B09                          LD       A, ($09,SP)
 290  000126   A40F                          AND      A, #$0F       ;
 291  000128   6B00                          LD       ( $00,SP),A   ; store nibble 1
 292  00012A   7B08                          LD       A, ($08,SP)
 293  00012C   A4F0                          AND      A, #$f0       ; nibble 4
 294  00012E   1A00                          OR       A, ($00,SP)   ; n4+n1
 295  000130   6B00                          LD       ( $00,SP),A   ; store BRR2 [n4,n1]
 296                                                          ;;--send -TO REGISTER BRR2
 297  000132   C75233                        LD       $5233 , A
 298                                                          ;----n3 n2
 299  000135   7B08                          LD       A, ($08,SP)
 300  000137   4E                            SWAP     A
 301  000138   A4F0                          AND      A, #$F0
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 11  Assembler
                                               d:\stm8\dbg1\main.asm

 302  00013A   6B00                          LD       ( $00,SP),A   ; store n3
 303  00013C   7B09                          LD       A, ($09,SP)
 304  00013E   4E                            SWAP     A
 305  00013F   A40F                          AND      A, #$0f
 306  000141   1A00                          OR       A, ( $00,SP)
 307                                                          ;--send to register BRR1
 308  000143   C75232                        LD       $5232, A
 309                                                          ; TCIEN interrupt on tx 
                                                                ;complete
 310  000146   721C5235                      BSET     $5235, #$6 
 311                                                          ;--setting TEN bit "Transmitter 
                                                                ;enable"
 312  00014A   72165235                      BSET     $5235 , #$3
 313                                                          ;--restore stack
 314  00014E   5B01                          ADDW     SP, #$01
 315  000150   84                            POP      A
 316  000151   81                            RET      
 317                         ;==PROCEDURE==uart1DuplexSetupIT
 318                         ;--set up Receiver and Transmitter
 319                         ; Turn on  TC, RXNE interrupts.
 320                         ;---------------------
 321                         ;@baudRate16, divider
 322                         ;@dataLength8, $10->9bits (1stop 1 start) , $00->8bits
 323                                                          ;(set  manually below)
 324                         ;@stopBits8, active only when 8 bits: $00->1bit, $20->2bits
 325                         ;@parity8, $00-disable, $04-enable: ($02-odd OR $00-even)
 326                         ;-----------
 327                         ;SP +5
 328                         ;  0  1 2 4    5         6      7      8 
 329                         ;[v8a|A|RET|stopBits|dataLength|baudRate]
 330                         
 331                         uart1DuplexSetupIT  
 332                                                          ;--store A
 333  000152   88                            PUSH     A
 334                                                          ;--allocate 1 byte
 335  000153   5201                          SUBW     SP, #$01
 336  000155                                 #define  _U1003_v8a $00 
 337  000155                                 #define  _U1003_parity $05
 338  000155                                 #define  _U1003_stopBits $06 
 339  000155                                 #define  _U1003_dataLength $07
 340  000155                                 #define  _U1003_baudRateH $08
 341  000155                                 #define  _U1003_baudRateL $09
 342                                                          ;--disable Rx, Tx
 343  000155   72155235                      BRES     $5235, #$2    ; REN flag
 344  000159   72175235                      BRES     $5235, #$3    ; TEN flag
 345                                                          ;--when the length 9 bits-jump 
                                                                ;below
 346  00015D   A610                          LD       A, #$10
 347  00015F   1407                          AND      A, ($07,SP)
 348  000161 R 2605                          JRNE     L_U1003_nsb   ;when 9 bits-go to label
 349                                                          ;--when 8 bit set stop bits
 350  000163   7B06                          LD       A, ($06,SP)
 351  000165   C75236                        LD       $5236, A
 352                         L_U1003_nsb  
 353                                                          ;--write data length and parity
 354  000168   7B07                          LD       A,($07,SP)
 355  00016A   1A05                          OR       A, ($05,SP)
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 12  Assembler
                                               d:\stm8\dbg1\main.asm

 356  00016C   C75234                        LD       $5234, A
 357                                                          ;prepare UART1_BRR2
 358                                                          ;n4 n1
 359  00016F   7B09                          LD       A, ($09,SP)
 360  000171   A40F                          AND      A, #$0F       ;
 361  000173   6B00                          LD       ( $00,SP),A   ; store nibble 1
 362  000175   7B08                          LD       A, ($08,SP)
 363  000177   A4F0                          AND      A, #$f0       ; nibble 4
 364  000179   1A00                          OR       A, ($00,SP)   ; n4+n1
 365  00017B   6B00                          LD       ( $00,SP),A   ; store BRR2 [n4,n1]
 366                                                          ;;--send -TO REGISTER BRR2
 367  00017D   C75233                        LD       $5233 , A
 368                                                          ;----n3 n2
 369  000180   7B08                          LD       A, ($08,SP)
 370  000182   4E                            SWAP     A
 371  000183   A4F0                          AND      A, #$F0
 372  000185   6B00                          LD       ( $00,SP),A   ; store n3
 373  000187   7B09                          LD       A, ($09,SP)
 374  000189   4E                            SWAP     A
 375  00018A   A40F                          AND      A, #$0f
 376  00018C   1A00                          OR       A, ( $00,SP)
 377                                                          ;--send to register BRR1
 378  00018E   C75232                        LD       $5232, A
 379                                                          ;turn on interrupt on tx 
                                                                ;complete, Rx not empty
 380  000191   721C5235                      BSET     $5235, #$6    ; TCIEN
 381  000195   721A5235                      BSET     $5235, #$5    ; RIEN
 382                                                          ;--set  "Transmitter enable", 
                                                                ;"receiver enable"
 383  000199   72165235                      BSET     $5235 , #$3
 384  00019D   72145235                      BSET     $5235 , #$2
 385                                                          ;--restore stack
 386  0001A1   5B01                          ADDW     SP, #$01
 387  0001A3   84                            POP      A
 388  0001A4   81                            RET      
 389                                                          ;====P R O C E D U R E===turn on
                                                                ; clk bus
 390                                                          ;@peripherial8
 391                                                          ;TIM1-$80,TIM3-$40,TIM2/5-$20,TI
                                                                ;M4/6-$10,UART-see datasheet,
 392                                                          ;SPI-$2,I2C-1
 393                                                          ;STACK after return +1
 394                         clkBusPeripherial1  
 395  0001A5   88                            PUSH     A
 396  0001A6   7B04                          LD       A, ($04,SP)
 397  0001A8   C750C7                        LD       $50C7, A
 398  0001AB   84                            POP      A
 399  0001AC   81                            RET      
 400                                                          ;====P R O C E D U R E===turn on
                                                                ; clk bus
 401                                                          ;@peripherial8
 402                                                          ;CAN-$80, ADC-$08, AWU-$04
 403                                                          ;STACK after return +1
 404                         clkBusPeripherial2  
 405  0001AD   88                            PUSH     A
 406  0001AE   7B04                          LD       A, ($04,SP)
 407  0001B0   C750CA                        LD       $50CA, A
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 13  Assembler
                                               d:\stm8\dbg1\main.asm

 408  0001B3   84                            POP      A
 409  0001B4   81                            RET      
 410                                                          ;===P R O C E D U R E=switch to 
                                                                ;Crystal
 411                                                          ;--NO PARAMS
 412                                                          ;STACK after return 0
 413                         clkSwitchToCrystal  
 414  0001B5   88                            PUSH     A
 415                                                          ;--tuurn on HSE oscillator
 416  0001B6   A601                          LD       A, #$01
 417  0001B8   C750C1                        LD       $50C1, A
 418                         clkSwitchToCrystal_hsi_rdy  
 419                                                          ;--wait until crystal oscillator
                                                                ; ready (HSERDY)
 420  0001BB R 720350C1FB                    BTJF     $50C1, #$01, clkSwitchToCrystal_hsi_rdy
 421                                                          ;---Enable the switching 
                                                                ;mechanism
 422  0001C0   C650C5                        LD       A, $50C5
 423  0001C3   AA02                          OR       A, #$02
 424  0001C5   C750C5                        LD       $50C5, A
 425                                                          ;---select source clock
 426                                                          ;0xE1: HSI selected as master 
                                                                ;clock source (reset value)
 427                                                          ;0xD2: LSI selected as master 
                                                                ;clock source (only if LSI_EN
 428                                                          ;option bit is set)
 429                                                          ;0xB4: HSE selected as master 
                                                                ;clock source
 430  0001C8   A6B4                          LD       A, #$B4
 431  0001CA   C750C4                        LD       $50C4, A
 432  0001CD   9D                            NOP      
 433  0001CE   84                            POP      A
 434  0001CF   81                            RET      
 435                                   
 436                                   
 437                                                          ;==P R O C E D U R E=="set HSI 
                                                                ;divider"
 438                                                          ;--@ char divider
 439                                                          ;STACK after return +1
 440                         clkSetHsiDivider  
 441                                                          ;--store registers A,X,Y,CC 
                                                                ;(1+2+2+1=6Bytes)
 442  0001D0   88                            PUSH     A
 443                                                          ;-read default value 
 444  0001D1   C650C6                        LD       A, $50C6
 445                                                          ;---clear all the hsi divider 
                                                                ;bits
 446  0001D4   A4E7                          AND      A, #$E7
 447                                                          ;--1st paprameter has offset 9 
                                                                ;bytes
 448                                                          ; because A,X,Y,CC,SP has ben 
                                                                ;stored later 
 449  0001D6   1A04                          OR       A, ($04,SP)
 450                                                          ;---update CLK_CKDIVR
 451  0001D8   C750C6                        LD       $50C6, A
 452                                                          ;--restore registers
 453  0001DB   84                            POP      A
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 14  Assembler
                                               d:\stm8\dbg1\main.asm

 454  0001DC   81                            RET      
 455                                   
 456                                                          ;======P R O C e D U R E==="set 
                                                                ;CPU divider"
 457                                                          ;@ char divider 
 458                                                          ;STACK after return +1
 459                         clkSetCpuDivider  
 460                                                          ;--store registers A,X,Y,CC 
                                                                ;(1+2+2+1=6Bytes)
 461  0001DD   88                            PUSH     A
 462                                                          ;-read default value 
 463  0001DE   C650C6                        LD       A, $50C6
 464                                                          ;---clear all the hsi divider 
                                                                ;bits
 465  0001E1   A4F8                          AND      A, #$f8
 466                                                          ;--1st paprameter has offset 9 
                                                                ;bytes
 467                                                          ; because A,X,Y,CC,SP has ben 
                                                                ;stored later
 468  0001E3   1A04                          OR       A, ($04,SP)
 469                                                          ;---update CLK_CKDIVR
 470  0001E5   C750C6                        LD       $50C6, A
 471                                                          ;--restore registers
 472  0001E8   84                            POP      A
 473  0001E9   81                            RET      
 474                                   
 475                                   
 476                                   
 477                         ;------I  S  R----------
 478                         
 479                         tim4Isr   
 480  0001EA   80                            IRET     
 481                                   
 482                                   
 483                                   
 484                         onTim1Update  
 485  0001EB   80                            IRET     
 486                         
 487                         uart1OnReceive  
 488  0001EC   7216500A                      BSET     $500A, #$3
 489  0001F0   C65231                        LD       A, $5231 
 490  0001F3   72100004                      BSET     _semaphore, #$0   ;;set semaphore
 491  0001F7   B750                          LD       _received_char, A   ;store symbol for echo
 492                                                          ;--test on errors
 493  0001F9   C65230                        LD       A, $5230
 494  0001FC   A40F                          AND      A, #$0F
 495  0001FE   721B500A                      BRES     $500A, #$5    ;turn OFF error LED
 496  000202 R 2704                          JREQ     _NO_ERR_RX    ; ? are there no errors?
 497  000204   721A500A                      BSET     $500A, #$5    ;turn ON error LED
 498                         _NO_ERR_RX  
 499                                                          ;when data has been transmitted
 500  000208 R 720D523005                    BTJF     $5230, #$6, NO_DATA_IN_TC
 501                         WAIT_UNTIL_TC  
 502                                                          ;wait until transmission 
                                                                ;complete
 503  00020D R 720D5230FB                    BTJF     $5230, #$6, WAIT_UNTIL_TC
 504                         NO_DATA_IN_TC  
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 15  Assembler
                                               d:\stm8\dbg1\main.asm

 505  000212   9D                            NOP      
 506                         
 507  000213   7217500A                      BRES     $500A, #$3
 508  000217   9D                            NOP      
 509  000218   80                            IRET     
 510                                   
 511                                   
 512                         uart1OnTransmit  
 513  000219   7218500A                      BSET     $500A, #$4
 514  00021D   721F500A                      BRES     $500A, #$7
 515  000221   C65230                        LD       A, $5230
 516  000224   721D5230                      BRES     $5230, #$6
 517  000228   721F5230                      BRES     $5230, #$7
 518                                                          ;--test on errors
 519  00022C   A40F                          AND      A, #$0F
 520  00022E   721B500A                      BRES     $500A, #$5    ;turn OFF error LED
 521  000232 R 2704                          JREQ     _NO_ERR_TX    ; ? are there no errors?
 522  000234   721A500A                      BSET     $500A, #$5    ;turn ON error LED
 523                         _NO_ERR_TX  
 524  000238   9D                            NOP      
 525  000239   9D                            NOP      
 526  00023A   7219500A                      BRES     $500A, #$4
 527  00023E   80                            IRET     
 528                         
 529                         
 530  00023F R                               interrupt NonHandledInterrupt
 531                         NonHandledInterrupt.l  
 532  00023F   80                            iret     
 533                                   segment  'vectit'
 534  000000 R 00000000                      dc.l     {$82000000+main}  ; reset
 535  000004 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; trap
 536  000008 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq0
 537  00000C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq1
 538  000010 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq2
 539  000014 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq3
 540  000018 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq4
 541  00001C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq5
 542  000020 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq6
 543  000024 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq7
 544  000028 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq8
 545  00002C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq9
 546  000030 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq10
 547  000034 R 00000000                      dc.l     {$82000000+onTim1Update}  ; irq11
 548  000038 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq12
 549  00003C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq13
 550  000040 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq14
 551  000044 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq15
 552  000048 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq16
 553  00004C R 00000000                      dc.l     {$82000000+uart1OnTransmit}  ; irq17
 554  000050 R 00000000                      dc.l     {$82000000+uart1OnReceive}  ; irq18
 555  000054 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq19
 556  000058 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq20
 557  00005C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq21
 558  000060 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq22
 559  000064 R 00000000                      dc.l     {$82000000+tim4Isr}  ; irq23
 560  000068 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq24
 561  00006C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq25
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 16  Assembler
                                               d:\stm8\dbg1\main.asm

 562  000070 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq26
 563  000074 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq27
 564  000078 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq28
 565  00007C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq29
 566                         
 567  000080                                 end      
STMicroelectronics assembler v4.52   (C)1987-2024   Sat Aug 31 22:10:56 2024
Page 17  Assembler
                                               d:\stm8\dbg1\main.asm

Symbol Name                       Value     Call       Type  Scope      Rel.  Line  Privacy  Segment   Size  Bytes File

L_U1000_nsb                           00D2         no  WORD  Internal   rel    214  private  textdata    53     0  -
L_U1001_nsb                           011D         no  WORD  Internal   rel    282  private  textdata    53     0  -
L_U1003_nsb                           0168         no  WORD  Internal   rel    352  private  textdata    61     0  -

NO_DATA_IN_TC                         0212         no  WORD  Internal   rel    504  private  textdata     7     0  -
NonHandledInterrupt               0000023F  interrupt  LONG  Internal   rel    531  private  textdata     1     0  -

WAIT_UNTIL_TC                         020D         no  WORD  Internal   rel    501  private  textdata     5     0  -

_RxPtr_                               0000         no  WORD  Internal   ABS      9  private  undef        0     0  -
_TxPtr_                               0002         no  WORD  Internal   ABS     11  private  undef        0     0  -
_semaphore                            0004         no  WORD  Internal   ABS     14  private  undef        0     0  -
_RxBuffer32                           0010         no  WORD  Internal   ABS     16  private  undef        0     0  -
_TxBuffer32                           0030         no  WORD  Internal   ABS     18  private  undef        0     0  -
_received_char                        0050         no  WORD  Internal   ABS     20  private  undef        0     0  -
_hello                                0000         no  WORD  Internal   rel     25  private  textdata    14     1  -
_last_rx_item                         00B4         no  WORD  Internal   rel    161  private  textdata     5     0  -
_no_sym_reeived                       00B9         no  WORD  Internal   rel    166  private  textdata     3     0  -
_NO_ERR_RX                            0208         no  WORD  Internal   rel    498  private  textdata     5     0  -
_NO_ERR_TX                            0238         no  WORD  Internal   rel    523  private  textdata     7     0  -

clear_ram0                        00000015         no  LONG  Internal   rel     37  private  textdata    10     0  -
clear_ram1                        0000001F         no  LONG  Internal   rel     49  private  textdata    10     0  -
clear_stack                       00000029         no  LONG  Internal   rel     60  private  textdata   111     0  -
clkBusPeripherial1                    01A5         no  WORD  Internal   rel    394  private  textdata     8     0  -
clkBusPeripherial2                    01AD         no  WORD  Internal   rel    404  private  textdata     8     0  -
clkSwitchToCrystal                    01B5         no  WORD  Internal   rel    413  private  textdata     6     0  -
clkSwitchToCrystal_hsi_rdy            01BB         no  WORD  Internal   rel    418  private  textdata    21     0  -
clkSetHsiDivider                      01D0         no  WORD  Internal   rel    440  private  textdata    13     0  -
clkSetCpuDivider                      01DD         no  WORD  Internal   rel    459  private  textdata    13     0  -

infinite_loop                     00000098         no  LONG  Internal   rel    145  private  textdata    28     0  -

main                              0000000E         no  LONG  Internal   rel     27  private  textdata     7     0  -

onTim1Update                          01EB         no  WORD  Internal   rel    484  private  textdata     1     0  -

ram0_start                              00         no  BYTE  Internal   ABS     34  private  textdata     0     0  -
ram0_end                                FF         no  BYTE  Internal   ABS     35  private  textdata     0     0  -
ram1_start                            0100         no  WORD  Internal   ABS     46  private  textdata     0     0  -
ram1_end                              01FF         no  WORD  Internal   ABS     47  private  textdata     0     0  -

str1                                  0051         no  WORD  Internal   ABS     22  private  undef        0     0  -
stack_start                           0200         no  WORD  Internal   ABS     57  private  textdata     0     0  -
stack_end                             03FF         no  WORD  Internal   ABS     58  private  textdata     0     0  -

tim4Isr                               01EA         no  WORD  Internal   rel    479  private  textdata     1     0  -

uart1ReceiverSetup                    00BC         no  WORD  Internal   rel    193  private  textdata    22     0  -
uart1TransmitterSetup                 0107         no  WORD  Internal   rel    261  private  textdata    22     0  -
uart1DuplexSetupIT                    0152         no  WORD  Internal   rel    331  private  textdata    22     0  -
uart1OnReceive                        01EC         no  WORD  Internal   rel    487  private  textdata    28     0  -
uart1OnTransmit                       0219         no  WORD  Internal   rel    512  private  textdata    31     0  -


42 labels
No errors on assembly of 'd:\stm8\dbg1\main.asm'